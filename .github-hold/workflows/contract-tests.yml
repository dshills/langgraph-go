name: Contract Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Test on ${{ matrix.os }} with Go ${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22', '1.23']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: langgraph_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      
      - name: Verify Go installation
        run: go version
      
      - name: Download dependencies
        run: go mod download
      
      - name: Verify dependencies
        run: go mod verify
      
      - name: Run go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi
        shell: bash
      
      - name: Run go vet
        run: go vet ./...
      
      - name: Run tests without race detector (quick check)
        run: go test -v -short ./...
      
      - name: Run contract tests with race detector
        run: go test -v -race -timeout 15m ./graph/...
        env:
          TEST_MYSQL_DSN: ${{ matrix.os == 'ubuntu-latest' && 'root:testpassword@tcp(127.0.0.1:3306)/langgraph_test?parseTime=true' || '' }}
      
      - name: Run determinism contract tests
        run: go test -v -race -run "TestReplayMismatchDetection|TestMergeOrderingWithRandomDelays" ./graph/...
      
      - name: Run exactly-once contract tests
        run: go test -v -race -run "TestConcurrentStateUpdates|TestAtomicStepCommit|TestIdempotencyEnforcement|TestNoDuplicatesUnderConcurrency" ./graph/...
        env:
          TEST_MYSQL_DSN: ${{ matrix.os == 'ubuntu-latest' && 'root:testpassword@tcp(127.0.0.1:3306)/langgraph_test?parseTime=true' || '' }}
      
      - name: Run backpressure contract tests
        run: go test -v -race -run "TestBackpressureBlocking" ./graph/...
      
      - name: Run RNG determinism contract tests
        run: go test -v -race -run "TestRNGDeterminism" ./graph/...
      
      - name: Run idempotency across stores contract tests
        run: go test -v -race -run "TestIdempotencyAcrossStores" ./graph/store/...
        env:
          TEST_MYSQL_DSN: ${{ matrix.os == 'ubuntu-latest' && 'root:testpassword@tcp(127.0.0.1:3306)/langgraph_test?parseTime=true' || '' }}
      
      - name: Run all tests with coverage
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        env:
          TEST_MYSQL_DSN: ${{ matrix.os == 'ubuntu-latest' && 'root:testpassword@tcp(127.0.0.1:3306)/langgraph_test?parseTime=true' || '' }}
      
      - name: Generate coverage report
        run: go tool cover -func=coverage.out
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          flags: unittests,${{ matrix.os }},go-${{ matrix.go-version }}
          name: codecov-${{ matrix.os }}-go-${{ matrix.go-version }}
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
      
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
      
      - name: Run benchmarks
        run: go test -bench=. -benchmem -run=^$ ./graph/... | tee benchmark.txt
      
      - name: Store benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt
          retention-days: 30
